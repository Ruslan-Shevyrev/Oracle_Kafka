CREATE OR REPLACE PACKAGE BODY PKG_KAFKA
AS

FUNCTION GET_TOKEN RETURN VARCHAR2
AS
	RES VARCHAR2 (4000);
BEGIN
/*	SELECT TOKEN 
		INTO RES
		FROM APP_APEX_MICROSERVICES.DOCKER_CONTAINERS
		WHERE NAME = 'kafka_rest_python';*/
	RETURN RES;
END GET_TOKEN;

FUNCTION SEND_MESSAGE(vTOPIC 	IN VARCHAR, 
					cVALUE 		IN CLOB, 
					vKEY 		IN VARCHAR2 DEFAULT NULL,
					vURL		IN VARCHAR2) RETURN NUMBER
AS
	req 			UTL_HTTP.REQ;
	resp 			UTL_HTTP.RESP;
	vBODY			CLOB;
	nBODY_LENGTH	NUMBER;
	nAMOUNT			NUMBER := 25000;
	nOFFSET 		NUMBER := 1;
	vBUFFER			VARCHAR2 (32767);
	vLINE 			VARCHAR2 (4000);
	vTEXT 			VARCHAR2 (4000);
	nSTATUS_CODE	NUMBER := -1;
	cVALUE_SEND		CLOB;
BEGIN
	req := UTL_HTTP.BEGIN_REQUEST(url => vURL, METHOD => 'POST' );
	UTL_HTTP.SET_BODY_CHARSET('UTF-8');

	cVALUE_SEND := REPLACE(cVALUE, '"', '\"');

	IF vKEY IS NOT NULL THEN
		vBODY := '{"topic": "'||vTOPIC||'", "value": "'||cVALUE_SEND||'", "key": "'||vKEY||'"}';
	ELSE
		vBODY := '{"topic": "'||vTOPIC||'", "value": "'||cVALUE_SEND||'"}';
	END IF;

	nBODY_LENGTH := DBMS_LOB.GETLENGTH(vBODY);

	UTL_HTTP.SET_HEADER(req, 'Authorization', 'Bearer '||GET_TOKEN);
	UTL_HTTP.SET_HEADER(req, 'Content-Type', 'text/plain; charset=utf-8');
	UTL_HTTP.SET_HEADER(req, 'Content-Length', nBODY_LENGTH);

	IF nBODY_LENGTH > 32768 THEN
		WHILE (nOFFSET < nBODY_LENGTH) LOOP
			BEGIN
				DBMS_LOB.READ (vBODY,
								nAMOUNT,
                        		nOFFSET,
                        		vBUFFER);

			EXCEPTION WHEN OTHERS THEN
				NULL;
			END; 

			BEGIN              
				UTL_HTTP.WRITE_TEXT (req, vBUFFER);
			EXCEPTION WHEN OTHERS THEN 
				NULL;
			END;
				nOFFSET := nOFFSET + nAMOUNT;
		END LOOP;
	ELSE
		UTL_HTTP.WRITE_TEXT(req, vBODY); 
	END IF;

	resp := UTL_HTTP.GET_RESPONSE(req);

	nSTATUS_CODE := resp.status_code;

	BEGIN
	 	LOOP
			UTL_HTTP.READ_LINE(resp, vLINE, TRUE );
			vTEXT := vTEXT || vLINE;
		END LOOP;
	EXCEPTION WHEN UTL_HTTP.END_OF_BODY THEN
		NULL;
	END;

	UTL_HTTP.END_RESPONSE(resp);	
	UTL_HTTP.END_REQUEST(req);

	RETURN nSTATUS_CODE;
--EXCEPTION WHEN UTL_HTTP.END_OF_BODY THEN
	UTL_HTTP.END_RESPONSE (resp);
	RETURN nSTATUS_CODE;
--WHEN OTHERS THEN
	UTL_HTTP.END_RESPONSE(resp);
	UTL_HTTP.END_REQUEST(req);
	RETURN nSTATUS_CODE;
END SEND_MESSAGE;

FUNCTION SEND_MESSAGE(vTOPIC 	IN VARCHAR, 
					cVALUE 		IN CLOB, 
					vKEY 		IN VARCHAR2 DEFAULT NULL) RETURN NUMBER
AS
	nSTATUS_CODE	NUMBER := -1;
BEGIN
	nSTATUS_CODE := SEND_MESSAGE(vTOPIC 	=> vTOPIC, 
							cVALUE 		=> cVALUE, 
							vKEY 		=> vKEY,
							vURL 		=> vURL_PROD);
	RETURN nSTATUS_CODE;
END SEND_MESSAGE;

FUNCTION SEND_MESSAGE_TEST(vTOPIC 	IN VARCHAR, 
						cVALUE 		IN CLOB, 
						vKEY 		IN VARCHAR2 DEFAULT NULL) RETURN NUMBER
AS
	nSTATUS_CODE	NUMBER := -1;
BEGIN
	nSTATUS_CODE := SEND_MESSAGE(vTOPIC 	=> vTOPIC, 
								cVALUE 		=> cVALUE, 
								vKEY 		=> vKEY,
								vURL 		=> vURL_TEST);
	RETURN nSTATUS_CODE;
END SEND_MESSAGE_TEST;

PROCEDURE SEND_MESSAGE(vTOPIC 	IN VARCHAR, 
					cVALUE 		IN CLOB, 
					vKEY 		IN VARCHAR2 DEFAULT NULL)
AS
	nSTATUS_CODE	NUMBER;
BEGIN
	nSTATUS_CODE := SEND_MESSAGE(vTOPIC 	=> vTOPIC, 
							cVALUE 		=> cVALUE, 
							vKEY 		=> vKEY);
END SEND_MESSAGE;

PROCEDURE SEND_MESSAGE_TEST(vTOPIC 	IN VARCHAR, 
						cVALUE 		IN CLOB, 
						vKEY 		IN VARCHAR2 DEFAULT NULL)
AS
	nSTATUS_CODE	NUMBER;
BEGIN
	nSTATUS_CODE := SEND_MESSAGE_TEST(vTOPIC 	=> vTOPIC, 
									cVALUE 		=> cVALUE, 
									vKEY 		=> vKEY);
END SEND_MESSAGE_TEST;

END PKG_KAFKA;